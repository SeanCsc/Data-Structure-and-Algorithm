1. Brute force:
连起来－排序  O((m+n)(log(m+n))

2. dummynode - when the lists are changed i.e we are not sure the head node of the list. When we don't know the head node of the linked list.
2pointer 双指针问题。当处理两个数组／链表的时候 用两个指针来根据条件移动，节省时间也很好用。

Key 在于dummynode 和 真正工作的curnode 的职责。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(0);
        ListNode* p1 = l1;
        ListNode* p2 = l2;
        ListNode* cur = dummy; 
        if(l1 == NULL) return l2;
        if(l2 == NULL ) return l1;
        while(p1!= NULL && p2!= NULL){
            if(p1->val < p2->val){
                ListNode* tmp = p1->next;
                cur->next = p1;
                cur = p1;
                p1 = p1->next;
            }
            else{
                ListNode* tmp = p2->next;
                cur->next = p2;
                cur = p2;
                p2 = p2->next;
            }
        }
        if(p2 == NULL) cur->next = p1;
        else if(p1 == NULL) cur->next = p2;
        
        return dummy->next;
    }
};

3.也可以用迭代。
