queue并没有反向性质。因此两个queue是同等地位
Key在于保证每次都有一个是空的。入的时候放到不是空的那里面，出的时候把不是空的往另一个里放，直到最后一个。
注意queue是有front(),back()两种可以读取队首元素和队尾元素的。

class MyStack {
public:
    /** Initialize your data structure here. */
        queue<int> q1 ;
        queue<int> q2 ;
    MyStack() {

    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(!q1.empty()) q1.push(x);
        else q2.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int res = 0;
        if(!q1.empty()){
            while(q1.size() > 1){
                q2.push(q1.front());
                q1.pop();
            }
            res = q1.front();
            q1.pop();
        }
        else if(!q2.empty()){
            while(q2.size() > 1){
                q1.push(q2.front());
                q2.pop();
            }
             res = q2.front();
             q2.pop();
        }
       return res;
    }
    
    /** Get the top element. */
    int top() {
        int res = 0;
        if(!q1.empty()){
            return q1.back();
        }
        else if(!q2.empty()){
           return q2.back();
    }
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q1.empty()&&q2.empty()) return true;
        else return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
