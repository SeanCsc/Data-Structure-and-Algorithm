Python:
update- not - == null
思路是一样的。
#corner - #def dfs - recursion
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        def dfs(left,right):
            if not left and  not right:
                return True;
            if not left or not right:
                return False;
            if left.val!=right.val:
                return False
            return dfs(left.left,right.right) and dfs(left.right,right.left)
        return dfs(root.left,root.right)
        


c++:
类似same tree,加进来一个辅助函数
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool fun(TreeNode* p, TreeNode* q){
        if(p== NULL && q== NULL) return true;
        if(p!= NULL && q!= NULL && q->val == p->val){
            return fun(p->left,q->right) && fun(p->right,q->left);
        }
        return false;
    }
    
    bool isSymmetric(TreeNode* root) {
        if(root == NULL) return true;
         return fun(root->left, root->right) ;

    }
};
