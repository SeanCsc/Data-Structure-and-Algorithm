找最长回文子串
key: 最长，回文。
回文的特点满足dp的条件（基于上一层）。一般最长这种类型通常用dp或者滑动窗口。
那么dp：
首先是确定初始状态，然后是确定转移条件。

class Solution {
public:
    string longestPalindrome(string s) {
        int dp[s.size()][s.size()] = {0}, left = 0, right = 0, len = 0;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                dp[j][i] = (s[i] == s[j] && (i - j < 2 || dp[j + 1][i - 1]));
                if (dp[j][i] && len < i - j + 1) {
                    len = i - j + 1;
                    left = j;
                    right = i;
                }
            }
            dp[i][i] = 1;
        }
        return s.substr(left, right - left + 1);
    }
};
注意初始条件可以和转移条件结合到一起，并且int型数组要比二维vector快很多
